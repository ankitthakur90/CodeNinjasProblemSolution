/* 
Problem Statement -:
Given n non-negative integers representing an elevation map where the width of each bar is 1,
compute how much water it can trap after raining.


Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case,
6 units of rain water (blue section) are being trapped.

Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9
 



Problem link 

https://www.codingninjas.com/studio/problems/trapping-rainwater_630519

*/

// Problem Solution

#include<iostream>
#include<vector>
#include<bits/stdc++.h>
using namespace std;

void findLeftLimit(long long* arr ,vector<long long> &leftLimit,int n){

    long long leftLimitIndex = 0;

    for(long long i = 0 ; i < n;i++){
        if( i == 0){
            leftLimit.push_back(arr[i]);
        }
        else{
            long long val =  max(leftLimit[leftLimitIndex],arr[i]);
            leftLimit.push_back(val);
            leftLimitIndex++;
        }
    }
/* 
    for(long long j = 0 ; j <leftLimit.size();j++){
    cout<<" vlaue in leftLimit at "<< j << " is "<< leftLimit[j]<< " "<<endl;
    } */
  }

  void findRightLimit(long long* arr ,vector<long long> &rightLimit,int n){
     long long rightLimitIndex = 0 ;
     for(long long i = 0 ; i<n ;i ++){
         if( i == 0){
            rightLimit.push_back(arr[n-i-1]);
        }
        else{
            long long val = max(rightLimit[rightLimitIndex],arr[n-i-1]);
            rightLimit.push_back(val);
            rightLimitIndex++;
        }
     }
      long long p =0 ;
       long long q = rightLimit.size()-1;

     while ( p < q)
     {
        swap(rightLimit[p],rightLimit[q]);
        p++;
        q--;
     }
     /* 
      for(long long j = 0 ; j <rightLimit.size();j++){
    cout<<" vlaue in leftLimit at "<< j << " is "<< rightLimit[j]<< " "<<endl;
    } */
     
  }

long long getTrappedWater(long long* arr, int n) {
    
    
   if( n == 0 || n == 1 || n == 2){
     return 0;
   }

   vector<long long>sum;
   vector<long long>rightLimit(0);
   vector<long long>leftLimit(0);
   long long ans = 0;
   

   findLeftLimit(arr , leftLimit,n);
   findRightLimit(arr,rightLimit,n);

   for(long long i = 0 ;i< n ; i++){
       long long waterLevel = min(rightLimit[i],leftLimit[i]);
       long long value = (waterLevel - arr[i]) * 1;
       if(value < 0){
        sum.push_back(0);
       }
       else{
        sum.push_back(value);
       }
       
   }
/*     for(long long j = 0 ; j <sum.size();j++){
    cout<<" vlaue in sum at "<< j << " is "<< sum[j]<< " "<<endl;
    }  */
   

   for(long long j = 0  ; j < sum.size(); j++){
       ans += sum[j];
   }


   return ans;
}

int main(int argc, char const *argv[])
{

    long long arr[] = {0,1,0,2,1,0,1,3,2,1,2,1};
    int n = 12;

    cout<<getTrappedWater(arr,n);
    return 0;
}

